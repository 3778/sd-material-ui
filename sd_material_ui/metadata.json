{
  "src/lib/components/BottomNavigation.react.js": {
    "description": "BottomNavigationItem is an item in a BottomNavigation component",
    "displayName": "BottomNavigation",
    "methods": [
      {
        "name": "buildBottomNavigationItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "navItem",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\r\n  /** Label to use for the navigation item */\r\n  label: string,\r\n  /** Value for the navigation item */\r\n  value: string | number,\r\n  /** ID of component to jump to when this option is selected */\r\n  targetId?: string,\r\n  /** Class to apply to the icon span */\r\n  iconClassName?: string,\r\n}",
              "signature": {
                "properties": [
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "union",
                      "raw": "string | number",
                      "elements": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        }
                      ],
                      "required": true
                    }
                  },
                  {
                    "key": "targetId",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "iconClassName",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  }
                ]
              },
              "alias": "T_NAV_ITEM"
            }
          },
          {
            "name": "selectedValue",
            "type": {
              "name": "number"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The ID used to identify this component in Dash callbacks",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\r\n  root?: string,\r\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\r\nnames, and the values must be strings for the classnames to be assigned to each rule name\r\nValid rule names are:\r\n  root",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "displayLabels": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If True, show the labels of unselected Items",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "navItems": {
        "required": true,
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{\r\n  /** Label to use for the navigation item */\r\n  label: string,\r\n  /** Value for the navigation item */\r\n  value: string | number,\r\n  /** ID of component to jump to when this option is selected */\r\n  targetId?: string,\r\n  /** Class to apply to the icon span */\r\n  iconClassName?: string,\r\n}",
              "signature": {
                "properties": [
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "union",
                      "raw": "string | number",
                      "elements": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        }
                      ],
                      "required": true
                    }
                  },
                  {
                    "key": "targetId",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "iconClassName",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  }
                ]
              }
            }
          ],
          "raw": "Array<T_NAV_ITEM>"
        },
        "description": "Array of navigation item props to pass to BottomNavigationItem"
      },
      "selectedValue": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "Initial selected value for the BottomNavigation"
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: { selectedValue: number }) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ selectedValue: number }",
                  "signature": {
                    "properties": [
                      {
                        "key": "selectedValue",
                        "value": {
                          "name": "number",
                          "required": true
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash-assigned callback that should be called whenever any of the\r\nproperties change",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Button.react.js": {
    "description": "",
    "displayName": "Button",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "This is what will be displayed inside the button.\r\nIf a label is specified, the text within the label prop will\r\nbe displayed. Otherwise, the component will expect children\r\nwhich will then be displayed. (In our example,\r\nwe are nesting an `<input type=\"file\" />` and a `span`\r\nthat acts as our label to be displayed.) This only\r\napplies to flat and disableShadow buttons.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\r\n  root?: string,\r\n  label?: string,\r\n  text?: string,\r\n  textPrimary?: string,\r\n  textSecondary?: string,\r\n  outline?: string,\r\n  outlinedPrimary?: string,\r\n  outlinedSecondary?: string,\r\n  contained?: string,\r\n  containedPrimary?: string,\r\n  containedSecondary?: string,\r\n  disableElevation?: string,\r\n  focusVisible?: string,\r\n  disabled?: string,\r\n  colorInherit?: string,\r\n  textSizeSmall?: string,\r\n  textSizeLarge?: string,\r\n  outlinedSizeSmall?: string,\r\n  outlinedSizeLarge?: string,\r\n  containedSizeSmall?: string,\r\n  containedSizeLarge?: string,\r\n  sizeSmall?: string,\r\n  sizeLarge?: string,\r\n  fullWidth?: string,\r\n  startIcon?: string,\r\n  endIcon?: string,\r\n  iconSizeSmall?: string,\r\n  iconSizeMedium?: string,\r\n  iconSizeLarge?: string,\r\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "label",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "text",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "textPrimary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "textSecondary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "outline",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "outlinedPrimary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "outlinedSecondary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "contained",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "containedPrimary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "containedSecondary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "disableElevation",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "focusVisible",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "disabled",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorInherit",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "textSizeSmall",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "textSizeLarge",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "outlinedSizeSmall",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "outlinedSizeLarge",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "containedSizeSmall",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "containedSizeLarge",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "sizeSmall",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "sizeLarge",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "fullWidth",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "startIcon",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "endIcon",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "iconSizeSmall",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "iconSizeMedium",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "iconSizeLarge",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\r\nnames, and the values must be strings for the classnames to be assigned to each rule name\r\nValid rule names are:\r\n  root\r\n  label\r\n  text\r\n  textPrimary\r\n  textSecondary\r\n  outline\r\n  outlinedPrimary\r\n  outlinedSecondary\r\n  contained\r\n  containedPrimary\r\n  containedSecondary\r\n  disableElevation\r\n  focusVisible\r\n  disabled\r\n  colorInherit\r\n  textSizeSmall\r\n  textSizeLarge\r\n  outlinedSizeSmall\r\n  outlinedSizeLarge\r\n  containedSizeSmall\r\n  containedSizeLarge\r\n  sizeSmall\r\n  sizeLarge\r\n  fullWidth\r\n  startIcon\r\n  endIcon\r\n  iconSizeSmall\r\n  iconSizeMedium\r\n  iconSizeLarge\r\n\n  OR\r\n\n  root\r\n  edgeStart\r\n  edgeEnd\r\n  colorInherit\r\n  colorPrimary\r\n  colorSecondary\r\n  disabled\r\n  sizeSmall\r\n  label\r\n\nSee https://material-ui.com/api/button/#css\r\nand https://material-ui.com/api/icon-button/#css",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "disableTouchRipple": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the element's ripple effect will be disabled",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "Disable the button?",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fireEvent": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to trigger an event handler",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "fullWidth": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the button will take up the full width of its container",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "href": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The URL to link to when the button is clicked",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "iconClass": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "Sets the class of a span element inside the button",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "id": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "Element ID"
      },
      "n_clicks": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "An integer that represents the number fo times that this element has been clicked",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_previous": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "An integer that represents the previous number of times this element has been clicked",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "disableShadow": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "Hide the shadow behind the button"
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Override the inline styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "useIcon": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, this object is rendered as an IconButton"
      },
      "variant": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "'contained' | 'outlined' | 'text', Button type if not an IconButton",
        "defaultValue": {
          "value": "'text'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Card.react.js": {
    "description": "Material UI Card component",
    "displayName": "Card",
    "methods": [],
    "props": {
      "id": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "ID for Card",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "Can be used to render elements inside the Card.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\r\n  root?: string,\r\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\r\nnames, and the values must be strings for the classnames to be assigned to each rule name\r\nValid rule names are:\r\n  root",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "actionAreaClassName": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The CSS class name of the actionArea element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "actionAreaClasses": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "The classes to be applied to the actionArea component. This keys in this object must be valid CSS rule\r\nnames, and the values must be strings for the classnames to be assigned to each rule name",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "actionsClassName": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The CSS class name of the actions element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "actionsClasses": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "The classes to be applied to the actions component. This keys in this object must be valid CSS rule\r\nnames, and the values must be strings for the classnames to be assigned to each rule name",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "contentClassName": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The CSS class name of the content element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "contentClasses": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "The classes to be applied to the content component. This keys in this object must be valid CSS rule\r\nnames, and the values must be strings for the classnames to be assigned to each rule name",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "headerClassName": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The CSS class name of the header element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "headerClasses": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "The classes to be applied to the header component. This keys in this object must be valid CSS rule\r\nnames, and the values must be strings for the classnames to be assigned to each rule name",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "headerAvatar": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "This is the Avatar element to be displayed on the Card Header. If avatar is an Avatar or\r\nother element, it will be rendered. If avatar is a string, it will be used as the image src\r\nfor an Avatar.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "headerIconClassName": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The CSS class name of the header Icon element"
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Styles to be implemented as inline css",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "raised": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the Card component will appear raised",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Checkbox.react.js": {
    "description": "Material UI Checkbox component",
    "displayName": "Checkbox",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "checked": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "Checkbox is checked if true",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\r\n  root?: string,\r\n  checked?: string,\r\n  disabled?: string,\r\n  indeterminate?: string,\r\n  colorPrimary?: string,\r\n  colorSecondary?: string,\r\n  sizeSmall?: string,\r\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "checked",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "disabled",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "indeterminate",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorPrimary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorSecondary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "sizeSmall",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\r\nnames, and the values must be strings for the classnames to be assigned to each rule name\r\nValid rule names are:\r\n  root\r\n  checked\r\n  disabled\r\n  indeterminate\r\n  colorPrimary\r\n  colorSecondary",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "disabled": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "Checkbox is disabled if true",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fireEvent": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "A callback for firing events to dash",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "The element's ID"
      },
      "label": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The label for the checkbox",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "name": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The name prop of the checkbox",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Override the inline styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Dialog.react.js": {
    "description": "Material UI Dialog component",
    "displayName": "Dialog",
    "methods": [
      {
        "name": "changeDialogOpenStatus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "open",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "openDialog",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "closeDialog",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "UNSAFE_componentWillReceiveProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nextProps",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\r\n  /** Dialog ID */\r\n  id: string,\r\n  /** List of space separated id's of elements to use as aria labels  */\r\n  ariaLabelledBy?: string,\r\n  /** Children to render inside of the Dialog */\r\n  children?: Node,\r\n  /** The classes to be applied to this component. This keys in this object must be valid CSS rule\r\n   * names, and the values must be strings for the classnames to be assigned to each rule name\r\n   * Valid rule names are:\r\n   *   root\r\n   *   container\r\n   *   paper\r\n   *   scrollPaper\r\n   *   scrollBody\r\n   *   paperScrollPaper\r\n   *   paperScrollBody\r\n   *   paperWidthFalse\r\n   *   paperWidthXs\r\n   *   paperWidthSm\r\n   *   paperWidthMd\r\n   *   paperWidthLg\r\n   *   paperWidthXl\r\n   *   paperFullWidth\r\n   *   paperFullScreen\r\n   * */\r\n  classes?: {\r\n    root?: string,\r\n    container?: string,\r\n    paper?: string,\r\n    scrollPaper?: string,\r\n    scrollBody?: string,\r\n    paperScrollPaper?: string,\r\n    paperScrollBody?: string,\r\n    paperWidthFalse?: string,\r\n    paperWidthXs?: string,\r\n    paperWidthSm?: string,\r\n    paperWidthMd?: string,\r\n    paperWidthLg?: string,\r\n    paperWidthXl?: string,\r\n    paperFullWidth?: string,\r\n    paperFullScreen?: string\r\n  },\r\n  /** CSS class name of the root element */\r\n  className?: string,\r\n  /** Is the dialog open?\r\n   *\r\n   * IMPORTANT: When using this component in Dash, a listener must be set up (either as state or\r\n   * an input) for this component's props.open value in order to achieve the desired behavior.\r\n   * If such a listener is not in place, the non-modal version of this dialog will contaminate\r\n   * other callbacks in the browser\r\n   */\r\n  open?: boolean,\r\n  /** If set to true, the body content of the Dialog will be scrollable. */\r\n  autoScrollBodyContent?: boolean,\r\n  /** The className to add to the component container */\r\n  componentContainerClassName?: string,\r\n  /** The className to add to the content container */\r\n  fullWidth?: boolean,\r\n  /** The className to add to the Overlay component rendered behind the Dialog */\r\n  /** If set to true, the Close Icon will show in the upper right corner of the dialog, closing the Dialog browser side*/\r\n  useBrowserSideClose?: boolean,\r\n  /** \"paper\" or \"body\", Determines scroll container */\r\n  scroll?: Object,\r\n  /** Styles to be implemented as inline css */\r\n  style?: Object,\r\n  /** Dash callback to update props on the server */\r\n  setProps?: (props: { modal?: boolean, open?: boolean }) => void,\r\n}",
              "signature": {
                "properties": [
                  {
                    "key": "id",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "ariaLabelledBy",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "children",
                    "value": {
                      "name": "Node",
                      "required": false
                    }
                  },
                  {
                    "key": "classes",
                    "value": {
                      "name": "signature",
                      "type": "object",
                      "raw": "{\r\n  root?: string,\r\n  container?: string,\r\n  paper?: string,\r\n  scrollPaper?: string,\r\n  scrollBody?: string,\r\n  paperScrollPaper?: string,\r\n  paperScrollBody?: string,\r\n  paperWidthFalse?: string,\r\n  paperWidthXs?: string,\r\n  paperWidthSm?: string,\r\n  paperWidthMd?: string,\r\n  paperWidthLg?: string,\r\n  paperWidthXl?: string,\r\n  paperFullWidth?: string,\r\n  paperFullScreen?: string\r\n}",
                      "signature": {
                        "properties": [
                          {
                            "key": "root",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "container",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paper",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "scrollPaper",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "scrollBody",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperScrollPaper",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperScrollBody",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperWidthFalse",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperWidthXs",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperWidthSm",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperWidthMd",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperWidthLg",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperWidthXl",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperFullWidth",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperFullScreen",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          }
                        ]
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "className",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "open",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "autoScrollBodyContent",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "componentContainerClassName",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "fullWidth",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "useBrowserSideClose",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "scroll",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "style",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "setProps",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "(props: { modal?: boolean, open?: boolean }) => void",
                      "signature": {
                        "arguments": [
                          {
                            "name": "props",
                            "type": {
                              "name": "signature",
                              "type": "object",
                              "raw": "{ modal?: boolean, open?: boolean }",
                              "signature": {
                                "properties": [
                                  {
                                    "key": "modal",
                                    "value": {
                                      "name": "boolean",
                                      "required": false
                                    }
                                  },
                                  {
                                    "key": "open",
                                    "value": {
                                      "name": "boolean",
                                      "required": false
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": false
                    }
                  }
                ]
              },
              "alias": "Props"
            }
          },
          {
            "name": "nextContent",
            "type": {
              "name": "unknown"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "void"
          }
        }
      }
    ],
    "props": {
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Dialog ID"
      },
      "ariaLabelledBy": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "List of space separated id's of elements to use as aria labels",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "Children to render inside of the Dialog",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\r\n  root?: string,\r\n  container?: string,\r\n  paper?: string,\r\n  scrollPaper?: string,\r\n  scrollBody?: string,\r\n  paperScrollPaper?: string,\r\n  paperScrollBody?: string,\r\n  paperWidthFalse?: string,\r\n  paperWidthXs?: string,\r\n  paperWidthSm?: string,\r\n  paperWidthMd?: string,\r\n  paperWidthLg?: string,\r\n  paperWidthXl?: string,\r\n  paperFullWidth?: string,\r\n  paperFullScreen?: string\r\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "container",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paper",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "scrollPaper",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "scrollBody",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperScrollPaper",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperScrollBody",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperWidthFalse",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperWidthXs",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperWidthSm",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperWidthMd",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperWidthLg",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperWidthXl",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperFullWidth",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperFullScreen",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\r\nnames, and the values must be strings for the classnames to be assigned to each rule name\r\nValid rule names are:\r\n  root\r\n  container\r\n  paper\r\n  scrollPaper\r\n  scrollBody\r\n  paperScrollPaper\r\n  paperScrollBody\r\n  paperWidthFalse\r\n  paperWidthXs\r\n  paperWidthSm\r\n  paperWidthMd\r\n  paperWidthLg\r\n  paperWidthXl\r\n  paperFullWidth\r\n  paperFullScreen",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "open": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "Is the dialog open?\r\n\nIMPORTANT: When using this component in Dash, a listener must be set up (either as state or\r\nan input) for this component's props.open value in order to achieve the desired behavior.\r\nIf such a listener is not in place, the non-modal version of this dialog will contaminate\r\nother callbacks in the browser",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "autoScrollBodyContent": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If set to true, the body content of the Dialog will be scrollable.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "componentContainerClassName": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The className to add to the component container"
      },
      "fullWidth": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "The className to add to the content container",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "useBrowserSideClose": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If set to true, the Close Icon will show in the upper right corner of the dialog, closing the Dialog browser side",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "scroll": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "\"paper\" or \"body\", Determines scroll container",
        "defaultValue": {
          "value": "'body'",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Styles to be implemented as inline css",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: { modal?: boolean, open?: boolean }) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ modal?: boolean, open?: boolean }",
                  "signature": {
                    "properties": [
                      {
                        "key": "modal",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      },
                      {
                        "key": "open",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "actions": {
        "defaultValue": {
          "value": "null",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/lib/components/Drawer.react.js": {
    "description": "",
    "displayName": "Drawer",
    "methods": [],
    "props": {
      "anchor": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "Controls where the drawer appears. Must be one of \"top\", \"bottom\", \"left\", or \"right\"\r\nDefaults to \"left\"",
        "defaultValue": {
          "value": "\"left\"",
          "computed": false
        }
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Dialog ID"
      },
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "Children to render inside of the Dialog",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\r\n  root?: string,\r\n  docked?: string,\r\n  paper?: string,\r\n  paperAnchorLeft?: string,\r\n  paperAnchorRight?: string,\r\n  paperAnchorTop?: string,\r\n  paperAnchorBottom?: string,\r\n  paperAnchorDockedLeft?: string,\r\n  paperAnchorDockedTop?: string,\r\n  paperAnchorDockedRight?: string,\r\n  paperAnchorDockedBottom?: string,\r\n  modal?: string\r\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "docked",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paper",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperAnchorLeft",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperAnchorRight",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperAnchorTop",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperAnchorBottom",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperAnchorDockedLeft",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperAnchorDockedTop",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperAnchorDockedRight",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperAnchorDockedBottom",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "modal",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\r\nnames, and the values must be strings for the classnames to be assigned to each rule name\r\nValid rule names are:\r\n  root\r\n  docked\r\n  paper\r\n  paperAnchorLeft\r\n  paperAnchorRight\r\n  paperAnchorTop\r\n  paperAnchorBottom\r\n  paperAnchorDockedLeft\r\n  paperAnchorDockedTop\r\n  paperAnchorDockedRight\r\n  paperAnchorDockedBottom\r\n  modal",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "open": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "Is the drawer open?\r\n\nIMPORTANT: When using this component in Dash, a listener must be set up (either as state or\r\nan input) for this component's props.open value in order to achieve the desired behavior.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: { modal?: boolean, open?: boolean }) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ modal?: boolean, open?: boolean }",
                  "signature": {
                    "properties": [
                      {
                        "key": "modal",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      },
                      {
                        "key": "open",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "classNameRoot": {
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/lib/components/FontIcon.react.js": {
    "description": "Material UI FontIcon component",
    "displayName": "FontIcon",
    "methods": [],
    "props": {
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\r\n  root?: string,\r\n  colorPrimary?: string,\r\n  colorSecondary?: string,\r\n  colorAction?: string,\r\n  colorError?: string,\r\n  colorDisabled?: string,\r\n  fontSizeSmall?: string,\r\n  fontSizeLarge?: string,\r\n  fontSizeInherit?: string,\r\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorPrimary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorSecondary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorAction",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorError",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorDisabled",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "fontSizeSmall",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "fontSizeLarge",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "fontSizeInherit",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\r\nnames, and the values must be strings for the classnames to be assigned to each rule name\r\nValid rule names are:\r\n  root\r\n  colorPrimary\r\n  colorSecondary\r\n  colorAction\r\n  colorError\r\n  colorDisabled\r\n  fontSizeSmall\r\n  fontSizeLarge\r\n  fontSizeInherit",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "id": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "id for the component",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "iconName": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "defines specific icon when using public icon font",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "override inline-styles of root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Paper.react.js": {
    "description": "A Dash material-ui Paper component",
    "displayName": "Paper",
    "methods": [],
    "props": {
      "id": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "ID for Paper",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "Can be used to render elements inside the Paper",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The CSS class name of the root element",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\r\n  root?: string,\r\n  rounded?: string,\r\n  outlined?: string,\r\n  elevation0?: string,\r\n  elevation1?: string,\r\n  elevation2?: string,\r\n  elevation3?: string,\r\n  elevation4?: string,\r\n  elevation5?: string,\r\n  elevation6?: string,\r\n  elevation7?: string,\r\n  elevation8?: string,\r\n  elevation9?: string,\r\n  elevation10?: string,\r\n  elevation11?: string,\r\n  elevation12?: string,\r\n  elevation13?: string,\r\n  elevation14?: string,\r\n  elevation15?: string,\r\n  elevation16?: string,\r\n  elevation17?: string,\r\n  elevation18?: string,\r\n  elevation19?: string,\r\n  elevation20?: string,\r\n  elevation21?: string,\r\n  elevation22?: string,\r\n  elevation23?: string,\r\n  elevation24?: string,\r\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "rounded",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "outlined",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation0",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation1",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation2",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation3",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation4",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation5",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation6",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation7",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation8",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation9",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation10",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation11",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation12",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation13",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation14",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation15",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation16",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation17",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation18",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation19",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation20",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation21",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation22",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation23",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation24",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\r\nnames, and the values must be strings for the classnames to be assigned to each rule name\r\nValid rule names are:\r\n  root\r\n  rounded\r\n  outlined\r\n  elevation0\r\n  elevation1\r\n  ...\r\n  elevation23\r\n  elevation24",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "rounded": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "By default, the paper container will have a border radius.\r\nSet this to false to generate a container with sharp corners.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Override the inline-styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "zDepth": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "This number represents the zDepth of the paper shadow",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/RadioButtonGroup.react.js": {
    "description": "",
    "displayName": "RadioButtonGroup",
    "methods": [
      {
        "name": "buildRadioButton",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "buttonItem",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\r\n    /** If true, the radio button is disabled */\r\n  disabled?: boolean,\r\n  /** Label to appear next to button */\r\n  label?: string,\r\n  /** Specify the location of the label relative to the radio button\r\n   * Must be one of: \"top\", \"start\", \"bottom\", or \"end\". Defaults to \"end\" */\r\n  labelPlacement?: string,\r\n  /** value of the the radio button */\r\n  value?: any,\r\n}",
              "signature": {
                "properties": [
                  {
                    "key": "disabled",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "labelPlacement",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "any",
                      "required": false
                    }
                  }
                ]
              },
              "alias": "SD_RADIO_BUTTON"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": {
              "name": "Object",
              "alias": "Object"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\r\n  root?: string,\r\n  checked?: string,\r\n  disabled?: string,\r\n  colorPrimary?: string,\r\n  colorSecondary?: string\r\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "checked",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "disabled",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorPrimary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorSecondary",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to each radio button. This keys in this object must be valid CSS\r\nrule names, and the values must be strings for the classnames to be assigned to each rule name\r\nValid rule names are:\r\n  root\r\n  checked\r\n  disabled\r\n  colorPrimary\r\n  colorSecondary",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "the css class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "fireEvent": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "a callback for firng events to dash",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "the element's ID"
      },
      "name": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "the name that will be applied to the group of radio buttons"
      },
      "options": {
        "required": false,
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{\r\n    /** If true, the radio button is disabled */\r\n  disabled?: boolean,\r\n  /** Label to appear next to button */\r\n  label?: string,\r\n  /** Specify the location of the label relative to the radio button\r\n   * Must be one of: \"top\", \"start\", \"bottom\", or \"end\". Defaults to \"end\" */\r\n  labelPlacement?: string,\r\n  /** value of the the radio button */\r\n  value?: any,\r\n}",
              "signature": {
                "properties": [
                  {
                    "key": "disabled",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "labelPlacement",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "any",
                      "required": false
                    }
                  }
                ]
              }
            }
          ],
          "raw": "Array<SD_RADIO_BUTTON>"
        },
        "description": "used to create the RadioButtons to populate the RadioButtonGroup with. A Dash user passes in a\r\nlist of dict items, each one having at least a `value` and `label`. If that value is selected,\r\nvalueSelected will be updated",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "valueSelected": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Initial value selected"
      }
    }
  },
  "src/lib/components/Toggle.react.js": {
    "description": "",
    "displayName": "Toggle",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\r\n  root?: string,\r\n  edgeStart?: string,\r\n  edgeEnd?: string,\r\n  switchBase?: string,\r\n  colorPrimary?: string,\r\n  colorSecondary?: string,\r\n  sizeSmall?: string,\r\n  checked?: string,\r\n  disabled?: string,\r\n  input?: string,\r\n  thumb?: string,\r\n  tract?: string\r\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "edgeStart",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "edgeEnd",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "switchBase",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorPrimary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorSecondary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "sizeSmall",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "checked",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "disabled",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "input",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "thumb",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "tract",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\r\nnames, and the values must be strings for the classnames to be assigned to each rule name\r\nValid rule names are:\r\n  root\r\n  edgeStart\r\n  edgeEnd\r\n  switchBase\r\n  colorPrimary\r\n  colorSecondary\r\n  sizeSmall\r\n  checked\r\n  disabled\r\n  input\r\n  thumb\r\n  tract",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "disabled": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "Whether the toggle is disabled (true) or not (false)",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Toggle ID"
      },
      "label": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The label for the toggle",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "labelPlacement": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "If using a single label, its position can be: \"top\", \"start\", \"bottom\", or \"end\"",
        "defaultValue": {
          "value": "\"right\"",
          "computed": false
        }
      },
      "labelSpacing": {
        "required": false,
        "flowType": {
          "name": "int"
        },
        "description": "The space between the label(s) and toggle",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "secondaryLabel": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "A second label for the toggle. If this is used, the labelPlacement value is ignored, and the\r\nsecondaryLabel will be positioned to the right of the toggle, and the first label to the left",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: { modal?: boolean, open?: boolean }) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ modal?: boolean, open?: boolean }",
                  "signature": {
                    "properties": [
                      {
                        "key": "modal",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      },
                      {
                        "key": "open",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "toggled": {
        "required": true,
        "flowType": {
          "name": "boolean"
        },
        "description": "Whether toggle is on (true) or off (false)"
      }
    }
  }
}