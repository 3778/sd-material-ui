{
  "src/components/BottomNavigation.react.js": {
    "description": "BottomNavigationItem is an item in a BottomNavigation component",
    "displayName": "BottomNavigation",
    "methods": [
      {
        "name": "buildBottomNavigationItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "navItem",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  label: string,\n  icon: Element | string,\n  value: string | number,\n  targetId?: string,\n  iconClassName?: string,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "icon",
                    "value": {
                      "name": "union",
                      "raw": "Element | string",
                      "elements": [
                        {
                          "name": "Element"
                        },
                        {
                          "name": "string"
                        }
                      ],
                      "required": true
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "union",
                      "raw": "string | number",
                      "elements": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        }
                      ],
                      "required": true
                    }
                  },
                  {
                    "key": "targetId",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "iconClassName",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  }
                ]
              },
              "alias": "T_NAV_ITEM"
            }
          },
          {
            "name": "selectedIndex",
            "type": {
              "name": "number"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this compnent in Dash callbacks"
      },
      "navItems": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "label": {
                "name": "string",
                "required": false
              },
              "icon": {
                "name": "union",
                "value": [
                  {
                    "name": "element"
                  },
                  {
                    "name": "string"
                  }
                ],
                "required": false
              },
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ],
                "required": false
              },
              "targetId": {
                "name": "string",
                "description": "ID of component to jump to when this option is selected",
                "required": false
              },
              "iconClassName": {
                "name": "string",
                "description": "Class to apply to the icon span",
                "required": false
              }
            }
          }
        },
        "required": true,
        "description": "Array of navigation item props to pass to BottomNavigationItem",
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{\n  label: string,\n  icon: Element | string,\n  value: string | number,\n  targetId?: string,\n  iconClassName?: string,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "icon",
                    "value": {
                      "name": "union",
                      "raw": "Element | string",
                      "elements": [
                        {
                          "name": "Element"
                        },
                        {
                          "name": "string"
                        }
                      ],
                      "required": true
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "union",
                      "raw": "string | number",
                      "elements": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        }
                      ],
                      "required": true
                    }
                  },
                  {
                    "key": "targetId",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "iconClassName",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  }
                ]
              }
            }
          ],
          "raw": "Array<T_NAV_ITEM>"
        }
      },
      "selectedIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Initial selected index for the BottomNavigation",
        "flowType": {
          "name": "number"
        },
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "selectedStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Style to apply to the selected icon",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called whenever any of the\nproperties change",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: { selectedIndex: number }) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ selectedIndex: number }",
                  "signature": {
                    "properties": [
                      {
                        "key": "selectedIndex",
                        "value": {
                          "name": "number",
                          "required": true
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {\n}",
          "computed": false
        }
      }
    }
  },
  "src/components/SDDialog.react.js": {
    "description": "",
    "displayName": "SDDialog",
    "methods": [
      {
        "name": "changeDialogOpenStatus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "open",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "void"
          }
        }
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Dialog ID",
        "flowType": {
          "name": "string"
        }
      },
      "actions": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "node"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            }
          ]
        },
        "required": false,
        "description": "Actions component or list of components for the Dialog",
        "flowType": {
          "name": "Node"
        },
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "modal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Is the Dialog a modal (must click on an action to close the Dialog)?",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Is the dialog open?\nIMPORTANT: When using this component in Dash, a listener must be set up (either as state or\nan input) for this component's props.open value in order to achieve the desired behavior.\nIf such a listener is not in place, the non-modal version of this dialog will contaminate\nother callbacks in the browser",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash callback to update props on the server",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: { modal?: boolean, open?: boolean }) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ modal?: boolean, open?: boolean }",
                  "signature": {
                    "properties": [
                      {
                        "key": "modal",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      },
                      {
                        "key": "open",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "children of the Dialog",
        "flowType": {
          "name": "Node"
        },
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      }
    }
  },
  "src/components/SDDrawer.react.js": {
    "description": "",
    "displayName": "SDDrawer",
    "methods": [
      {
        "name": "changeDrawerStatus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "open",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The contents of the Drawer",
        "flowType": {
          "name": "Node"
        },
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the root element.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "containerclassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the container element.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "containerStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of the container element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "disableSwipeToOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, swiping sideways when the Drawer is closed will not open it.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "docked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the Drawer will be docked. In this state, the overlay won't show and clicking on a\nmenu item will not close the Drawer.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "",
        "flowType": {
          "name": "string"
        }
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the Drawer is opened. Whether true or false, ensures that the drawer is a controlled\ncomponent.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "openSecondary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the Drawer is positioned to open from the opposite side.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "overlayClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name to add to the Overlay component that is rendered behind the Drawer.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "overlayStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of the Overlay component that is rendered behind the Drawer.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of the root element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "swipeAreaWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the left most (or right most) area in pixels where the Drawer can be swiped\nopen from. Setting this to null spans that area to the entire page (CAUTION! Setting this\nproperty to null might cause issues with sliders and swipeable Tabs: use at your own risk).",
        "flowType": {
          "name": "number"
        },
        "defaultValue": {
          "value": "30",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "PropTypes.string",
              "computed": true
            },
            {
              "value": "PropTypes.number",
              "computed": true
            }
          ]
        },
        "required": false,
        "description": "The width of the Drawer in pixels or percentage in string format ex. 50% to fill half of the\nwindow or 100% and so on. Defaults to using the values from theme.",
        "flowType": {
          "name": "union",
          "raw": "string | number",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "zDepth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The zDepth of the Drawer.",
        "flowType": {
          "name": "number"
        },
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      }
    }
  },
  "src/components/SDFlatButton.react.js": {
    "description": "",
    "displayName": "SDFlatButton",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "backgroundColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color of button when mouse is not hovering over it.",
        "flowType": {
          "name": "string"
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "This is what will be displayed inside the button.\nIf a label is specified, the text within the label prop will\nbe displayed. Otherwise, the component will expect children\nwhich will then be displayed. (In our example,\nwe are nesting an `<input type=\"file\" />` and a `span`\nthat acts as our label to be displayed.) This only\napplies to flat and raised buttons.",
        "flowType": {
          "name": "Node"
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the root element.",
        "flowType": {
          "name": "string"
        }
      },
      "containerElement": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "element"
            }
          ]
        },
        "required": false,
        "description": "The element to use as the container for the FlatButton. Either a string to\nuse a DOM element or a ReactElement. This is useful for wrapping the\nFlatButton in a custom Link component. If a ReactElement is given, ensure\nthat it passes all of its given props through to the underlying DOM\nelement and renders its children prop for proper integration."
      },
      "disableTouchRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the element's ripple effect will be disabled.",
        "flowType": {
          "name": "boolean"
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables the button if set to true.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fireEvent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash.",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the button will take up the full width of its container.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hoverColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color of button when mouse hovers over.",
        "flowType": {
          "name": "string"
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The URL to link to when the button is clicked.",
        "flowType": {
          "name": "string"
        }
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Use this property to display an icon.",
        "flowType": {
          "name": "Node"
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "flowType": {
          "name": "string"
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label for the button.",
        "flowType": {
          "name": "string"
        }
      },
      "labelPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'before'",
              "computed": false
            },
            {
              "value": "'after'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Place label before or after the passed children.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "'after'",
          "computed": false
        }
      },
      "labelStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Override the inline-styles of the button's label element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "flowType": {
          "name": "number"
        },
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "primary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, colors button according to\nprimaryTextColor from the Theme.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "rippleColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color for the ripple after button is clicked.",
        "flowType": {
          "name": "string"
        }
      },
      "secondary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, colors button according to secondaryTextColor from the theme.\nThe primary prop has precendent if set to true.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash callback to update props on the server",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Override the inline-styles of the root element.",
        "flowType": {
          "name": "Object"
        }
      }
    }
  },
  "src/components/SDRaisedButton.react.js": {
    "description": "",
    "displayName": "SDRaisedButton",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "backgroundColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override the default background color for the button, but not the default disabled\nbackground color (use disabledBackgroundColor for this).",
        "flowType": {
          "name": "string"
        }
      },
      "buttonStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Override the inline-styles of the button element.",
        "flowType": {
          "name": "Object"
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the button. If a label is provided via the label prop, the text within the\nlabel will be displayed in addition to the content provided here.",
        "flowType": {
          "name": "Node"
        },
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the root element.",
        "flowType": {
          "name": "string"
        }
      },
      "containerElement": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "element"
            }
          ]
        },
        "required": false,
        "description": "The element to use as the container for the RaisedButton. Either a string to use a DOM element\nor a ReactElement. This is useful for wrapping the RaisedButton in a custom Link component.\nIf a ReactElement is given, ensure that it passes all of its given props through to the\nunderlying DOM element and renders its children prop for proper integration.",
        "flowType": {
          "name": "string"
        }
      },
      "disableTouchRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the element's ripple effect will be disabled.",
        "flowType": {
          "name": "boolean"
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables the button if set to true.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabledBackgroundColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override the default background color for the button when it is disabled.",
        "flowType": {
          "name": "string"
        }
      },
      "disabledLabelColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The color of the button's label when the button is disabled.",
        "flowType": {
          "name": "string"
        }
      },
      "fireEvent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash.",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the button will take up the full width of its container.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The URL to link to when the button is clicked.",
        "flowType": {
          "name": "string"
        }
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Use this property to display an icon.",
        "flowType": {
          "name": "Node"
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The element's ID",
        "flowType": {
          "name": "string"
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The label to be displayed within the button. If content is provided via the children prop,\nthat content will be displayed in addition to the label provided here.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "labelColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The color of the button's label."
      },
      "labelPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'before'",
              "computed": false
            },
            {
              "value": "'after'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The position of the button's label relative to the button's children.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "'after'",
          "computed": false
        }
      },
      "labelStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Override the inline-styles of the button's label element.",
        "flowType": {
          "name": "Object"
        }
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "flowType": {
          "name": "number"
        },
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "overlayStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Override the inline style of the button overlay.",
        "flowType": {
          "name": "Object"
        }
      },
      "primary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the button will use the theme's primary color.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "rippleStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Override the inline style of the ripple element."
      },
      "secondary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the button will use the theme's secondary color. If both secondary and primary are\ntrue, the button will use the theme's primary color.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash callback to update props on the server",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Override the inline-styles of the root element.",
        "flowType": {
          "name": "Object"
        }
      },
      "rippleColor": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": ""
      }
    }
  }
}